name: vulnerability-scan
on:
  workflow_dispatch: {} # Allows manual triggering of the workflow
  schedule:
    - cron: '23 1 * * *' # Runs the workflow every day at 01:23

env:
  REGISTRY: ghcr.io # Environment variable for the container registry
  IMAGE_NAME: chandan-dk/scan-images # Environment variable for the image name

jobs:
  scan:
    runs-on: ubuntu-20.04 # Runs the job on Ubuntu 20.04
    permissions:
      contents: read # Grants read access to the repository contents
    outputs:
      scan-digest: ${{ steps.calculate-scan-hash.outputs.scan_digest }} # Defines an output variable for the scan digest
    steps:
    - name: Scan for vulnerabilities
      uses: aquasecurity/trivy-action@1db49f532692e649dc5dc43c7c0444dac4790137 # Uses the Trivy action to scan for vulnerabilities
      with: 
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest # Specifies the image reference to scan
        format: cosign-vuln # Specifies the output format as cosign-vuln
        ignore-unfixed: true # Ignores unfixed vulnerabilities
        output: scan.json # Specifies the output file name for the scan results

    - name: Calculate scan file hash
      id: calculate-scan-hash
      run: |
        SCAN_DIGEST=$(sha256sum scan.json | awk '{print $1}') # Calculates the hash of the scan file
        echo "::set-output name=scan_digest::$SCAN_DIGEST" # Sets the output variable with the scan digest
        echo "Hash of scan.json is: $SCAN_DIGEST" # Prints the hash of the scan file

    - name: Upload vulnerability scan report
      uses: actions/upload-artifact@3cea5372237819ed00197afe530f5a7ea3e805c8 # Uploads the scan.json artifact
      with:
        name: scan.json # Specifies the name of the artifact
        path: scan.json # Specifies the path of the artifact
        if-no-files-found: error # Throws an error if no files are found

  attest:
    runs-on: ubuntu-20.04 # Runs the job on Ubuntu 20.04
    permissions:
      contents: write # Grants write access to the repository contents
      actions: read # Grants read access to actions
      packages: write # Grants write access to packages
      id-token: write # Grants write access to ID tokens
    env:
      SCAN_DIGEST: "${{ needs.scan.outputs.scan-digest }}" # Retrieves the scan digest from the previous job
    needs: scan # Specifies that this job depends on the 'scan' job
    steps:
    - name: Download scan
      uses: actions/download-artifact@fb598a63ae348fa914e94cd0ff38f362e927b741 # Downloads the scan.json artifact
      with:
        name: scan.json # Specifies the name of the artifact

    - name: Verify scan
      run: |
        set -euo pipefail
        echo "Hash of scan.json should be: $SCAN_DIGEST" # Prints the expected hash of the scan file
        COMPUTED_HASH=$(sha256sum scan.json | awk '{print $1}') # Calculates the hash of the downloaded scan file
        echo "The current computed hash for scan.json is: $COMPUTED_HASH" # Prints the computed hash of the scan file
        echo "If the two above hashes don't match, scan.json has been tampered with."
        echo "$SCAN_DIGEST scan.json" | sha256sum --strict --check --status || exit -2 # Checks if the computed hash matches the expected hash

    - name: Install Cosign
      uses: sigstore/cosign-installer@09a077b27eb1310dcfb21981bee195b30ce09de0 # Installs Cosign
      with:
        cosign-release: v1.10.0 # Specifies the version of Cosign to install

    - name: Log in to GHCR
      uses: docker/login-action@49ed152c8eca782a232dede0303416e8f356c37b # Logs in to the container registry
      with:
        registry: ${{ env.REGISTRY }} # Specifies the registry to log in to
        username: ${{ github.actor }} # Specifies the username
        password: ${{ secrets.PAT }} # Specifies the password/token

    - name: Attest Scan
      run: cosign attest --replace --predicate scan.json --type vuln ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest # Attests the scan using Cosign
      env:
        COSIGN_EXPERIMENTAL: "true" # Enables experimental features in Cosign